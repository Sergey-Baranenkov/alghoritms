package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

const minCapacity = 16

type Deque struct {
	buf    []interface{}
	head   int
	tail   int
	count  int
	minCap int
}

func main(){
	//инициализируем число вершин и ребер
	scanner := bufio.NewScanner(os.Stdin)
	scanner.Scan()
	sizeArr:=strings.Split(scanner.Text()," ")

	paths:=[][]int{[]int{0,-1},[]int{-1,0},[]int{1,0},[]int{0,1}}
	rowNum,_:=strconv.Atoi(sizeArr[0])
	colNum,_:=strconv.Atoi(sizeArr[1])
	labyrinth:=make([]string,rowNum*colNum) //массив под лабиринт
	var startIndex int
	var finishIndex int
	Graph:=make([][]int,rowNum*colNum)
	for i:=range Graph{
		Graph[i] = []int{}
	}
	for i:=0;i<rowNum;i++{
		scanner.Scan()
		row:=scanner.Text()
		for j:=0;j<colNum;j++{
			symbol:= string(row[j])
			if symbol=="S"{startIndex = i*colNum +j} else if symbol=="F"{finishIndex = i*colNum +j}
			labyrinth[i*colNum + j] = symbol
		}
	}

	fmt.Println("Initial labyrinth:")
	for i:=0;i<rowNum;i++{
		for j:=0;j<colNum;j++{
			fmt.Printf("%s",labyrinth[i*colNum + j])
		}
		fmt.Println()
	}

	fmt.Println("Graph:")
	for _,path:=range paths{
		for i,ch:=range labyrinth{
			if ch == "#" {continue}
			newX:= i % colNum + path[0]
			newY:= i / colNum + path[1]
			if cohIndex:=newY*colNum + newX;newX>=0 && newX<colNum && newY>=0 && newY<rowNum && labyrinth[cohIndex]!="#"{
					Graph[i] = append(Graph[i],cohIndex)
			}
		}
	}
	for v,edges:=range Graph{
		fmt.Printf("%d - ",v)
		if len(edges)!=0{
			for _,edge:=range edges{
				fmt.Printf("%d ",edge)
			}
		}else{
			fmt.Print("None")
		}
		fmt.Println()
	}

	if colNum>0 && rowNum>0 {BFS(Graph,startIndex,finishIndex,&labyrinth)}
	fmt.Println("BFS result is :")
	for i:=0;i<rowNum;i++{
		for j:=0;j<colNum;j++{
			if symbol,err:=strconv.Atoi(labyrinth[i*colNum+j]);err==nil{
				fmt.Printf("%d ",symbol)
			}else{
				fmt.Print("-1 ")
			}
		}
		fmt.Println()
	}
}

func BFS (Graph [][]int, start int,finish int,labyrinth *[]string){
	Len:= len(Graph)
	var q Deque // очередь
	var visited = make([]bool,Len)	// массив предшественников

	q.PushBack([]int{start,0})
	visited[start]=true
	for q.Len() != 0 {
		v:= q.PopFront().([]int)
		(*labyrinth)[v[0]] = strconv.Itoa(v[1])
		if v[0] == finish{
			for q.Len() != 0 {
				w:= q.PopFront().([]int)
				(*labyrinth)[w[0]] = strconv.Itoa(w[1])
			}
			return
		}
		for _,neighbour:=range Graph[v[0]]{
			if !visited[neighbour]{
				visited[neighbour] = true
				q.PushBack([]int{neighbour,v[1] + 1})
			}
		}
	}
}

func (q *Deque) Len() int {
	return q.count
}

func (q *Deque) PushBack(elem interface{}) {
	q.growIfFull()

	q.buf[q.tail] = elem
	// Calculate new tail position.
	q.tail = q.next(q.tail)
	q.count++
}

func (q *Deque) PopFront() interface{} {
	if q.count <= 0 {
		panic("deque: PopFront() called on empty queue")
	}
	ret := q.buf[q.head]
	q.buf[q.head] = nil
	// Calculate new head position.
	q.head = q.next(q.head)
	q.count--

	q.shrinkIfExcess()
	return ret
}

// prev returns the previous buffer position wrapping around buffer.
func (q *Deque) prev(i int) int {
	return (i - 1) & (len(q.buf) - 1) // bitwise modulus
}

// next returns the next buffer position wrapping around buffer.
func (q *Deque) next(i int) int {
	return (i + 1) & (len(q.buf) - 1) // bitwise modulus
}

// growIfFull resizes up if the buffer is full.
func (q *Deque) growIfFull() {
	if len(q.buf) == 0 {
		if q.minCap == 0 {
			q.minCap = minCapacity
		}
		q.buf = make([]interface{}, q.minCap)
		return
	}
	if q.count == len(q.buf) {
		q.resize()
	}
}

// shrinkIfExcess resize down if the buffer 1/4 full.
func (q *Deque) shrinkIfExcess() {
	if len(q.buf) > q.minCap && (q.count<<2) == len(q.buf) {
		q.resize()
	}
}

// resize resizes the deque to fit exactly twice its current contents.  This is
// used to grow the queue when it is full, and also to shrink it when it is
// only a quarter full.
func (q *Deque) resize() {
	newBuf := make([]interface{}, q.count<<1)
	if q.tail > q.head {
		copy(newBuf, q.buf[q.head:q.tail])
	} else {
		n := copy(newBuf, q.buf[q.head:])
		copy(newBuf[n:], q.buf[:q.tail])
	}

	q.head = 0
	q.tail = q.count
	q.buf = newBuf
}
